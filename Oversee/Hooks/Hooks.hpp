#pragma once
#include "../SDK/SDK.hpp"

#define STDCALL __stdcall
#define FASTCALL __fastcall

class C_Hooks
{
public:
	void Initialize( );
	static void		STDCALL  hkCreateMove( int iSequence, float flFrametime, bool bIsActive, bool& bSendPacket );
	static void		STDCALL  hkCreateMove_Handler( int iSequence, float flFrameTime, bool bIsActive );
	static HRESULT	STDCALL  hkEndScene( IDirect3DDevice9* pDevice );
	static HRESULT	STDCALL	 hkReset( IDirect3DDevice9* pDevice, D3DPRESENT_PARAMETERS* pDeviceParameters );
	static void		FASTCALL hkModifyEyePosition( LPVOID pEcx, uint32_t, Vector& vecEyePosition );
	static void		FASTCALL hkSetupAliveLoop( LPVOID pEcx, uint32_t );
	static bool		FASTCALL hkWriteUsercmdDeltaToBuffer( LPVOID pEcx, uint32_t, int nSlot, bf_write* lpBuffer, int nFrom, int nTo, bool bIsNew );
	static void		FASTCALL hkOnClientWeaponChange( LPVOID pEcx, uint32_t, LPVOID pWeapon );
	static void		FASTCALL hkNotifyOnLayerChangeSequence( LPVOID pEcx, uint32_t, const C_AnimationLayer* pLayer, const int nNewSequence );
	static void		FASTCALL hkDoExtraBoneProcessing( LPVOID pEcx, uint32_t, C_StudioHDR* pHdr, Vector* vecVector, Quaternion* pSomething, matrix3x4_t* aMatrix, LPVOID aList, LPVOID pContext );
	static void		FASTCALL hkUpdateClientSideAnimation( LPVOID pEcx, uint32_t );
	static bool		FASTCALL hkSetupBones( LPVOID pEcx, uint32_t, matrix3x4_t* aMatrix, int iMaxBones, int iBoneMask, float flCurrentTime );
	static void		FASTCALL hkCalcView( LPVOID pEcx, uint32_t, Vector& vecEyeOrigin, QAngle& angEyeAngles, float& zNear, float& zFar, float& flFov );
	static void		FASTCALL hkCalcViewmodelBob( LPVOID pEcx, uint32_t, Vector& vecEyePos );
	static void		FASTCALL hkInterpolateServerEntities( LPVOID pEcx, uint32_t );
	static void		FASTCALL hkSetCollisionBounds( LPVOID pEcx, uint32_t, Vector* vecMins, Vector* vecMaxs );
	static void		FASTCALL hkClampBonesInBBOX( LPVOID pEcx, uint32_t, int a1, int a2 );
	static void		FASTCALL hkProcessMovement( LPVOID pEcx, uint32_t, C_BasePlayer* pPlayer, C_MoveData* m_MoveData );
	static void		FASTCALL hkDrawModelExecute( LPVOID pEcx, uint32_t, IMatRenderContext* pCtx, const DrawModelState_t& pState, const ModelRenderInfo_t& pInfo, matrix3x4_t* aMatrix );
	static void		FASTCALL hkStudioDrawModelExecute( LPVOID pEcx, uint32_t, LPVOID pResults, DrawModelInfo_t* pInfo, matrix3x4_t* pBoneToWorld, float_t* flpFlexWeights, float_t* flpFlexDelayedWeights, Vector& vrModelOrigin, int32_t iFlags );
	static void		FASTCALL hkPacketStart( LPVOID pEcx, uint32_t, int nSequenceAck, int nCommandAck );
	static void		FASTCALL hkPacketEnd( LPVOID pEcx, uint32_t );
	static void		FASTCALL hkNotePredictionError( LPVOID pEcx, uint32_t, Vector& vDelta );
	static bool		FASTCALL hkSendNetMessage( LPVOID pEcx, uint32_t, INetMessage& Message, bool bReliable, bool bVoice );
	static void*	FASTCALL hkGetClientModelRenderable( LPVOID pEcx, uint32_t );
	static bool		FASTCALL hkDispatchUserMessage( LPVOID pEcx, uint32_t, int iMessageType, int iArgument, int iSecondArgument, LPVOID pData );
	static void		FASTCALL hkPerformScreenOverlay( LPVOID pEcx, uint32_t, int x, int y, int iWidth, int iHeight );
	static int		FASTCALL hkListLeavesInBox( LPVOID pEcx, uint32_t, Vector& vecMin, Vector& vecMax, unsigned short* pList, int iMax );
	static void		FASTCALL hkEmitSound( LPVOID pEcx, uint32_t, IRecipientFilter& pFilter, int iEntIndex, int iChannel, const char* pSoundEntry, unsigned int nSoundEntryHash, const char* szSoundName, float flVolume, int nSeed, float flAttenuation, int iFlags, int iPitch, const Vector* pOrigin, const Vector* pDirection, void* pUtlVecOrigins, bool bUpdatePositions, float flSoundTime, int nSpeakerEntity, int unk );
	static void		FASTCALL hkPlayerMove( LPVOID pEcx, uint32_t );
	static float	FASTCALL hkGetAlphaModulation( LPVOID pEcx, uint32_t );
	static void		FASTCALL hkGetColorModulation( LPVOID pEcx, uint32_t, float* flRed, float* flGreen, float* flBlue );
	static float	FASTCALL hkGetScreenSizeAspectRatio( LPVOID pEcx, uint32_t, int X, int Y );
	static bool		FASTCALL hkSvCheats_GetBool( LPVOID pEcx, uint32_t );
	static bool		FASTCALL hkClPredDoResetLatch( LPVOID pEcx, uint32_t );
	static bool		FASTCALL hkInPrediction( LPVOID pEcx, uint32_t );
	static void		FASTCALL hkRunCommand( LPVOID pEcx, uint32_t, C_BasePlayer* pPlayer, C_UserCmd* pCmd, IMoveHelper* pMoveHelper );
	static void		FASTCALL hkLockCursor( LPVOID pEcx, uint32_t );
	static void		FASTCALL hkPaintTraverse( LPVOID pEcx, uint32_t, VGUI::VPANEL pPanel, bool bForceRepaint, bool bAllowForce );
	static void		FASTCALL hkOverrideView( LPVOID pEcx, uint32_t, C_ViewSetup* pViewSetup );
	static float	FASTCALL hkGetViewmodelFOV( LPVOID pEcx, uint32_t );
	static int		FASTCALL hkDoPostScreenEffects( LPVOID pEcx, uint32_t );
	static void		FASTCALL hkLevelInitPreEntity( LPVOID pEcx, uint32_t, const char* szNewMapName );
	static void		FASTCALL hkFrameStageNotify( LPVOID pEcx, uint32_t, ClientFrameStage_t Stage );
	static void		FASTCALL hkOnScreenSizeChanged( LPVOID pEcx, uint32_t, int nOldWidth, int nOldHeigth );
	static bool		FASTCALL hkProcessTempEntities( LPVOID pEcx, uint32_t, void* pMsg );
	static void		FASTCALL hkDrawSetColor( LPVOID pEcx, uint32_t, int Red, int Green, int Blue, int Alpha );
	static bool		FASTCALL hkSVCMsg_VoiceData( LPVOID pEcx, uint32_t, C_SVCMsg_VoiceData* pMsg );
	static bool		FASTCALL hkSVCMsg_GameEvent( LPVOID pEcx, uint32_t, C_SVCMsg_GameEvent* pMsg );
	static bool		FASTCALL hkMsgFunc_ReportHit( LPVOID pEcx, uint32_t, CCSUsrMsg_ReportHit* pMsg );
	static bool		FASTCALL hkMsgFunc_ProcessSpottedEntityUpdate( LPVOID pEcx, uint32_t, CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate* pMsg );
	static void		FASTCALL hkSoUpdated( LPVOID pEcx, uint32_t, Soid_t owner, C_SharedObject* object, int32_t event );
	static bool     FASTCALL hkEquipItemInLoadout( LPVOID pEcx, uint32_t, int32_t team, int32_t slot, uint64_t item_id, bool swap );
	static bool     FASTCALL hkSetItemBackpackPosition( LPVOID, int32_t, C_EconItemView* item, uint32_t position, bool force_unequip, bool allow_overflow );
	static void		FASTCALL hkDeleteItem( LPVOID, int32_t, uint64_t item_id, bool recycle );
	static void		FASTCALL hkPrecacheCustomMaterials( LPVOID, int32_t, uint64_t item_id, int32_t a2, int32_t a3 );
	static void		FASTCALL hkUpdateGeneratedMaterial( LPVOID, int32_t, int32_t a1, int32_t a2, int32_t a3 );
	static bool		FASTCALL hkIsConnected( LPVOID pEcx, uint32_t );
	static int		FASTCALL hkSendDatagram( LPVOID pEcx, uint32_t, void* lpData );
	static void		FASTCALL hkPlaySound( LPVOID pEcx, uint32_t, const char* szSoundEntry );
	static bool		FASTCALL hkIsLowViolence( LPVOID pEcx, uint32_t );

	static const char* FASTCALL hkParamsGetArgAsString( LPVOID, int32_t, int32_t params, int32_t index );
	static void		FASTCALL hkInitNewParticlesScalar(C_InitRandomColor* thisPtr, void* edx, CParticleCollection* pParticles, int start_p, int nParticleCount, int nAttributeWriteMask, void* pContext);
	
	static void __cdecl hkRecvTickbaseProxy( CRecvProxyData* Proxy, void* pStruct, void* pOut );
	static void __cdecl hkRecvFlashDurationProxy( CRecvProxyData* Proxy, void* pStruct, void* pOut );
	static void __cdecl hkRecvVelocityModifierProxy( CRecvProxyData* Proxy, void* pStruct, void* pOut );
	static void __cdecl hkSequenceProxy( CRecvProxyData* Proxy, void* pStruct, void* pOut );
	static void __cdecl hkLifeStateProxy( CRecvProxyData* Proxy, void* pStruct, void* pOut );
	static void __cdecl hkSimulationTime( CRecvProxyData* Proxy, void* pStruct, void* pOut );

	static void __cdecl CL_LagCompensation_Callback( IConVar* pConVar, const char* szOldValue, float flOldValue );
	static bool __cdecl hkIsUsingDebugStaticProps( );
	static void __cdecl hkShouldDrawFOG( );
	static void __cdecl hkCL_Move( float flFrameTime, bool bIsFinalTick );
	static void __cdecl hkCL_ReadPackets( bool bFrameFinished );
	static void __cdecl hkProcessInterpolatedList( );
};
namespace Hooks
{
	// Call Declaration
	typedef void( __thiscall* DrawModelExecute_t )( LPVOID, IMatRenderContext*, const DrawModelState_t&, const ModelRenderInfo_t&, matrix3x4_t* );
	typedef void( __thiscall* StudioDrawModelExecute_t )( LPVOID, LPVOID, DrawModelInfo_t*, matrix3x4_t*, float_t*, float_t*, Vector&, int32_t );
	typedef HRESULT( __stdcall* EndScene_t ) ( IDirect3DDevice9* );
	typedef HRESULT( __stdcall* Present_t ) ( IDirect3DDevice9*, RECT*, RECT*, HWND, RGNDATA* );
	typedef HRESULT( __stdcall* Reset_t ) ( IDirect3DDevice9*, D3DPRESENT_PARAMETERS* );
	typedef void( __thiscall* LockCursor_t ) ( void* );
	typedef void( __stdcall* CreateMove_t ) ( int, float, bool );
	typedef void( __thiscall* FrameStageNotify_t ) ( void*, ClientFrameStage_t );
	typedef void( __thiscall* OverrideView_t )( void*, C_ViewSetup* );
	typedef float( __thiscall* GetViewmodelFOV_t )( void* );
	typedef bool( __thiscall* GetBool_t )( void* );
	typedef void( __cdecl* _Host_RunFrame_Client )( bool );
	typedef void( __thiscall* PlaySound_t )( void*, const char* );
	typedef void( __thiscall* PacketStart_t )( void*, int, int );
	typedef void( __thiscall* FireEvents_t )( void* );
	typedef void( __thiscall* PacketEnd_t )( void* );
	typedef void( __thiscall* OnScreenSizeChanged_t )( void*, int, int );
	typedef void( __thiscall* RunCommand_t )( void*, C_BasePlayer*, C_UserCmd*, IMoveHelper* );
	typedef void( __vectorcall* CL_Move_t )( float, bool );
	typedef void( __thiscall* ProcessMovement_t )( void*, C_BasePlayer*, C_MoveData* );
	typedef void( __thiscall* ModifyEyePosition_t )( void*, Vector& );
	typedef bool( __thiscall* ProcessTempEntities_t )( void*, void* );
	typedef void( __thiscall* TraceFilterPlayerForHeadCollision_t )( void* );
	typedef bool( __thiscall* WriteUsercmdDeltaToBuffer_t ) ( LPVOID, int, bf_write*, int, int, bool );
	typedef float( __thiscall* GetScreenSizeAspectRatio_t )( LPVOID, int, int );
	typedef void( __thiscall* LevelInitPreEntity_t )( LPVOID, const char* );
	typedef int( __thiscall* ListLeavesInBox_t )( LPVOID, const Vector&, const Vector&, unsigned short*, int );
	typedef void( __thiscall* DrawModelExecute_Studio_t )( LPVOID, LPVOID, DrawModelInfo_t*, matrix3x4_t*, float*, float*, Vector&, int );
	typedef void( __thiscall* DrawModelExecute_Model_t )( LPVOID, IMatRenderContext*, const DrawModelState_t&, const ModelRenderInfo_t&, matrix3x4_t* );
	typedef bool( __thiscall* DispatchUserMessage_t )( LPVOID, int, int, int, LPVOID );
	typedef void( __thiscall* PerformScreenOverlay_t )( LPVOID, int, int, int, int );
	typedef bool( __thiscall* SendNetMessage_t )( LPVOID, INetMessage&, bool, bool );
	typedef int( __thiscall* DoPostScreenEffects_t )( LPVOID );
	typedef void( __thiscall* CalcView_t )( LPVOID, Vector&, QAngle&, float&, float&, float& );
	typedef void( __thiscall* DoExtraBoneProcessing_t )( LPVOID );
	typedef bool( __thiscall* SetupBones_t )( LPVOID, LPVOID, int, int, float );
	typedef void( __thiscall* StandardBlendingRules_t )( LPVOID, C_StudioHDR*, Vector*, Quaternion*, float, int );
	typedef void( __cdecl* ShouldDrawFog_t )( );
	typedef void( __thiscall* DrawSetColor_t ) ( LPVOID, int, int, int, int );
	typedef void( __thiscall* GetColorModulation_t )( LPVOID, float*, float*, float* );
	typedef void( __thiscall* SetCollisionBounds_t )( void*, Vector*, Vector* );
	typedef float( __thiscall* GetAlphaModulation_t )( LPVOID );
	typedef void( __thiscall* ClampBonesInBBOX_t )( LPVOID, int, int );
	typedef void( __thiscall* PaintTraverse_t )( LPVOID, VGUI::VPANEL, bool, bool );
	typedef void( __thiscall* EmitSound_t )( LPVOID, IRecipientFilter&, int, int, const char*, unsigned int, const char*, float, int, float, int, int, const Vector*, const Vector*, void*, bool, float, int, int );
	typedef bool( __thiscall* MsgFunc_ProcessSpottedEntityUpdate_t )( void*, void* );
	typedef void( __thiscall* InterpolateServerEntities_t )( void* );
	typedef bool( __thiscall* SVCMsg_VoiceData_t )( void*, void* );
	typedef bool( __fastcall* EquipItemInLoadout_t ) ( LPVOID, int32_t, int32_t, int32_t, uint64_t, bool );
	typedef void( __fastcall* SoUpdated_t ) ( LPVOID, int32_t, Soid_t, C_SharedObject*, int32_t );
	typedef bool( __fastcall* SetItemBackPackPosition_t ) ( LPVOID, int32_t, C_EconItemView*, uint32_t, bool, bool );
	typedef bool( __fastcall* AnyHandlerRegisteredToEvent_t ) ( LPVOID, int32_t, uint32_t );
	typedef const char* ( __fastcall* ParamsGetArgsAtString_t ) ( LPVOID, int32_t, int32_t, int32_t );
	typedef void( __fastcall* DeleteItem_t ) ( LPVOID, int32_t, uint64_t, bool );
	typedef void( __fastcall* UpdateGeneratedMaterial_t ) ( LPVOID, int32_t, int32_t, int32_t, int32_t );
	typedef bool( __fastcall* FireEventClientSide_t ) ( LPVOID, int32_t, IGameEvent* );
	typedef void( __cdecl* CL_ReadPacket_t )( bool );
	typedef void( __thiscall* SetupAliveLoop_t )( void* );
	typedef void( __thiscall* AddBoxOverlay_t )( LPVOID, const Vector&, const Vector&, const Vector&, QAngle const&, int, int, int, int, float );
	typedef void( __fastcall* InitNewParticlesScalar_t ) ( C_InitRandomColor*, void*, CParticleCollection*, int, int, int, void* );
	typedef int( __thiscall* SendDatagram_t )( void*, void* );

	/* proxy hooks */
	inline C_RecvHook* m_FlashDurationProxy = nullptr;
	inline C_RecvHook* m_VelocityModifierProxy = nullptr;
	inline C_RecvHook* m_SequenceProxy = nullptr;
	inline C_RecvHook* m_TickbaseProxy = nullptr;
	inline C_RecvHook* m_LifeStateProxy = nullptr;
	inline C_RecvHook* m_SimulationTimeProxy = nullptr;

	/* hooks originals */
	inline GetBool_t o_IsLowViolence = nullptr;
	inline PlaySound_t o_PlaySound = nullptr;
	inline SendDatagram_t o_SendDatagram = nullptr;
	inline DrawModelExecute_Studio_t o_StudioDrawModelExecute = nullptr;
	inline GetBool_t o_IsConnected = nullptr;
	inline AddBoxOverlay_t o_AddBoxOverlay = nullptr;
	inline DrawModelExecute_t o_DrawModelExecute = nullptr;
	inline InterpolateServerEntities_t o_InterpolateServerEntities = nullptr;
	inline EndScene_t o_EndScene = nullptr;
	inline Reset_t o_Reset = nullptr;
	inline Present_t o_Present = nullptr;
	inline SetupAliveLoop_t o_SetupAliveLoop = nullptr;
	inline LockCursor_t o_LockCursor = nullptr;
	inline CreateMove_t o_CreateMove = nullptr;
	inline MsgFunc_ProcessSpottedEntityUpdate_t o_MsgFunc_ProcessSpottedEntityUpdate = nullptr;
	inline MsgFunc_ProcessSpottedEntityUpdate_t o_MsgFunc_ReportHit = nullptr;
	inline FrameStageNotify_t o_FrameStageNotify = nullptr;
	inline SVCMsg_VoiceData_t o_SVCMsg_VoiceData = nullptr;
	inline SVCMsg_VoiceData_t o_SVCMsg_GameEvent = nullptr;
	inline OverrideView_t o_OverrideView = nullptr;
	inline GetViewmodelFOV_t o_GetViewmodelFOV = nullptr;
	inline PacketStart_t o_PacketStart = nullptr;
	inline PacketEnd_t o_PacketEnd = nullptr;
	inline GetBool_t o_SvCheats_GetBool = nullptr;
	inline GetBool_t o_SvShowImpacts_GetBool = nullptr;
	inline GetBool_t o_ClPredDoResetLatch_GetBool = nullptr;
	inline GetBool_t o_InPrediction_GetBool = nullptr;
	inline GetBool_t m_IsUsingDebugStaticProps = nullptr;
	inline SetCollisionBounds_t o_SetCollisionBounds = nullptr;
	inline RunCommand_t o_RunCommand = nullptr;
	inline CL_Move_t o_CL_Move = nullptr;
	inline CL_ReadPacket_t o_CL_ReadPackets = nullptr;
	inline ProcessMovement_t o_ProcessMovement = nullptr;
	inline GetAlphaModulation_t o_GetAlphaModulation = nullptr;
	inline GetColorModulation_t o_GetColorModulation = nullptr;
	inline ShouldDrawFog_t o_ShouldDrawFog = nullptr;
	inline ShouldDrawFog_t o_ProcessInterpolatedList = nullptr;
	inline StandardBlendingRules_t o_StandardBlendingRules = nullptr;
	inline SetupBones_t o_SetupBones = nullptr;
	inline CalcView_t o_CalcView = nullptr;
	inline DoPostScreenEffects_t o_DoPostScreenEffects = nullptr;
	inline OnScreenSizeChanged_t o_OnScreenSizeChanged = nullptr;
	inline DoExtraBoneProcessing_t o_DoExtraBoneProcessing = nullptr;
	inline WriteUsercmdDeltaToBuffer_t o_WriteUsercmdDeltaToBuffer = nullptr;
	inline GetScreenSizeAspectRatio_t o_GetScreenSizeAspectRatio = nullptr;
	inline ListLeavesInBox_t o_ListLeavesInBox = nullptr;
	inline LevelInitPreEntity_t o_LevelInitPreEntity = nullptr;
	inline DispatchUserMessage_t o_DispatchUserMessage = nullptr;
	inline PerformScreenOverlay_t o_PerformScreenOverlay = nullptr;
	inline ModifyEyePosition_t o_CalcViewmodelBob = nullptr;
	inline ModifyEyePosition_t o_ModifyEyePosition = nullptr;
	inline SendNetMessage_t o_SendNetMessage = nullptr;
	inline FireEvents_t o_UpdateClientSideAnimation = nullptr;
	inline FireEvents_t o_PlayerMove = nullptr;
	inline PaintTraverse_t o_PaintTraverse = nullptr;
	inline ClampBonesInBBOX_t o_ClampBonesInBBOX = nullptr;
	inline EmitSound_t o_EmitSound = nullptr;
	inline DrawSetColor_t o_DrawSetColor = nullptr;
	inline ProcessTempEntities_t o_ProcessTempEntities = nullptr;
	inline EquipItemInLoadout_t	o_EquipItemInLoadout = nullptr;
	inline SoUpdated_t o_SoUpdated = nullptr;
	inline SetItemBackPackPosition_t o_SetItemBackpackPosition = nullptr;
	inline AnyHandlerRegisteredToEvent_t o_AnyHandlerRegisteredToEvent = nullptr;
	inline ParamsGetArgsAtString_t o_ParamsGetArgsAtString = nullptr;
	inline DeleteItem_t o_DeleteItem = nullptr;
	inline UpdateGeneratedMaterial_t o_UpdateGeneratedMaterial = nullptr;
	inline FireEventClientSide_t o_FireEventClientSide = nullptr;
	inline InitNewParticlesScalar_t o_InitNewParticlesScalar = nullptr;
	inline ModifyEyePosition_t o_NotePredictionError = nullptr;
}

inline std::shared_ptr < C_Hooks > g_Hooks = std::make_shared < C_Hooks >( C_Hooks( ) );